Q1 create table students(primary key) and exam (foreign key)

CREATE TABLE students (id integer PRIMARY KEY AUTO_INCREMENT,name text, branch text);
INSERT INTO students(Name, Branch) VALUES('Jay', 'Computer Science'),
 ('Suhani', 'Electronic And Com'),
 ('Kriti', 'Electronic And Com');

CREATE TABLE exam (rollno integer, FOREIGN KEY(rollno)REFERENCES students(id),s_code text,marks integer, p_code text);
INSERT INTO exam(Rollno, S_code, Marks, P_code) VALUES (1, 'CS11', 50, 'CS'), 
(1, 'CS12', 60, 'CS'), 
(2, 'EC101', 66, 'EC'), 
(2, 'EC102', 70, 'EC'), 
(3, 'EC101', 45, 'EC'),
 (3, 'EC102', 50, 'EC');
Q2. Create table given below Employee and incentive ::
CREATE TABLE employee (employye_id integer PRIMARY KEY AUTO_INCREMENT,fisrst_name text,last_name text,salary double,joining_date date,department text);

INSERT INTO employee(employye_id, fisrst_name, last_name, salary, joining_date, department) VALUES (1, 'John', 'Abraham', 1000000, '2013-01-01','Banking'), 
(2, 'Michael', 'Clarke', 800000, '2013-01-01','Insurance'), 
(3, 'Roy', 'Thomas', 700000, '2013-02-01','Banking'), 
(4, 'Tom', 'Jose', 600000, '2013-02-01','Insurance'), 
(5, 'Jerry', 'Pinto', 650000, '2013-02-01','Insurance'),
 (6, 'Philip', 'Mathew', 750000, '2013-01-01','Services'), 
(7, 'TestName1', '123', 650000, '2013-01-01','Services'),
 (8, 'TestName2', 'Lname%', 600000, '2013-02-01','Insurance');

CREATE TABLE incentive (id integer primary key,incentive_date date,incentive_amount integer,employee_ref_id integer,
FOREIGN KEY(employee_ref_id) REFERENCES employee(employye_id));
INSERT INTO incentive (id, incentive_date, incentive_amount, employee_ref_id) VALUES
(1, '2013-02-01', 5000),
(2, '2013-02-01', 3000),
(3, '2013-02-01', 4000),
(1, '2013-01-01', 4500),
(2, '2013-01-01', 3500)

3 Get fisrst_name from employee table::
SELECT fisrst_name FROM employee WHERE employye_id=1; 

4 Get fisrst_name,joinig_date,and salary from employee table::
SELECT fisrst_name,joining_date,salary FROM employee WHERE employye_id=1;

5 Get all employee detail from the employee table order by fisrst_name ascending and salary descending::
SELECT * FROM employee ORDER BY fisrst_name ASC;
SELECT * FROM employee ORDER BY salary DESC;

6 Get employee details from employee table whose first name contains 'j' ::
SELECT * FROM employee WHERE fisrst_name LIKE '%j';

7 Get department wise maximum salary from employee table order by salary ascending::
SELECT * ,MAX(salary) AS Maxsalary FROM employee GROUP BY department ORDER BY salary;

8 select fisrst_name, incentive amount from employee and incentives table forthose employees who have incentives and incentive amount greater than 3000::
SELECT employee.fisrst_name, incentive.incentive_amount FROM employee JOIN incentive ON employye_id= employee_ref_id WHERE incentive_amount>3000;

9 create after insert trigger on employee table which insert records in viewtable::
CREATE TABLE viewtable(id int,fisrst_name varchar(20),last_name varchar(20),salary int ,joining_date date,department varchar(20));

DELIMITER //
CREATE TRIGGER insertlog
AFTER INSERT 
ON employee
FOR EACH ROW
BEGIN 
INSERT INTO viewtable VALUES(null, NEW.employye_id, NEW.fisrst_name, NEW.last_name, NEW.salary, New.joining_date, NEW.department, 'Record Inserted', now());
END 

DELIMITER //

Q.11 Create table  Salesperson and Customer ::

CREATE TABLE salesperson (sno int PRIMARY KEY,sname text,city text, comm REAL);
INSERT INTO salesperson VALUES (1001, 'Peel', 'London', .12), 
(1002, 'Serres', 'San Jose', .13),
 (1004, 'Motika', 'London', .11), 
(1007, 'Rafkin', 'Barcelona', .15),
 (1003, 'Axelrod', 'New York', .1);

CREATE TABLE customer( cnm INT PRIMARY KEY, cname VARCHAR(20), city VARCHAR(20), rating INT, sno INT,
 FOREIGN KEY(sno) REFERENCES salesperson(sno));

INSERT INTO customer(cnm, cname, city, rating, sno) VALUES (201, 'Hoffman', 'London', 100, 1001),
(202, 'Giovanne', 'Roe', 200, 1003),
 (203, 'Liu', 'San Jose', 300, 1002), 
(204, 'Grass', 'Barcelona', 100, 1002),
 (206, 'Clemens', 'London', 300, 1007),
 (207, 'Pereira', 'Roe', 100, 1004);

Q 14 names and cities of all salesperson in london with commission above 0.12::
SELECT sname,city FROM salesperson WHERE city='London' AND comm>0.12;

Q.15 All salespeople either in Barcelona or in London::
SELECT * FROM salesperson WHERE city='Barcelona' OR city='London';

Q.16 All salespeople with commission between 0.10 and 0.12. (Boundary valuesshould be excluded)::
SELECT * FROM salesperson WHERE comm BETWEEN 0.10 AND 0.12;

Q.17 All customers excluding those with rating <= 100 unless they are located in Rome::
SELECT * FROM customer WHERE rating <=100 AND city != 'Rome';
Q 18 Write a sql statement that displays all the information about all salespeople ::
CREATE TABLE salespeople(salesman_id int PRIMARY KEY,name text, city varchar(20), commission REAL);
INSERT INTO salespeople VALUES (5001, 'James Hoog', 'New York', 0.15),
(5002, ' Nail Knite', 'Paris', 0.13),
(5005, 'Pit Alex', ' London', 0.11),
(5006, ' Mc Lyon', ' Paris', 0.14),
(5007, 'Paul Adam', 'Rome', 0.13),
(5003, 'Lauson Hen', 'San Jose', 0.12)

SELECT * FROM salespeople;

Q.19 From the following table, write a SQL query to find orders that are delivered by a salesperson with ID. 5001. Return ord_no, ord_date, purch_amt ::

CREATE TABLE orders (ord_no int PRIMARY KEY,purch_amt REAL, ord_date date, customer_id int, salesman_id int,
FOREIGN KEY(salesman_id)REFERENCES salespeople(salesman_id));
INSERT INTO orders VALUES (70001, 150.5, '2012-10-05', 3005, 5002),
(70009, 270.65, '2012-09-10', 3001, 5005),
(70002, 65.26, '2012-10-05', 3002, 5001),
(70004, 110.5, '2012-08-17', 3009, 5003),
(70007, 948.5, '2012-09-10', 3005, 5002),
(70005, 2400.6, '2012-07-27', 3007, 5001),
(70008, 5760, '2012-09-10', 3002, 5001),
(70010, 1983.43, '2012-10-10', 3004, 5006),
(70003, 2480.4, '2012-10-10', 3009, 5003),
(70012, 250.45, '2012-06-27', 3008, 5002),
(70011, 75.29, '2012-08-17', 3003, 5007),
(70013, 3045.6, '2012-04-25', 3002, 5001)

SELECT ord_no,ord_date,purch_amt FROM orders WHERE salesman_id=5001;

Q.20 From the following table, write a SQL query to select a range of products whose price is in the range Rs.200 to Rs.600. Begin and end 
values are included. Return pro_id, pro_name, pro_price, and pro_com ::

CREATE TABLE item_mast(pro_id int PRIMARY KEY,pro_name varchar(20),pro_price REAL,pro_com int);
INSERT INTO item_mast VALUES
(101,'Mother Board', 3200.00, 15),
(102,'Key Board', 450.00, 16),
(103,'ZIP drive', 250.00, 14),
(104,'Speaker', 550.00, 16),
(105,'Monitor', 5000.00, 11),
(106,'DVD drive', 900.00, 12),
(107,'CD drive', 800.00, 12),
(108,'Printer', 2600.00, 13),
(109,'Refill cartridge', 350.00, 13),
(110,'Mouse', 250.00, 12)

SELECT pro_id,pro_name,pro_price,pro_com FROM item_mast WHERE pro_price BETWEEN 200.00 AND 600.00;

Q.21 From the following table, write a SQL query to calculate the averageprice for a manufacturer code of 16. Return avg ::

SELECT AVG(Pro_Price) FROM item_mast WHERE Pro_Code=16

Q.22 From the following table, write a SQL query to display the pro_name as 'Item Name' and pro_priceas 'Price in Rs.'::
SELECT pro_name AS item_name, pro_price AS price_in_rs FROM item_mast;


Q.23 From the following table, write a SQL query to find the items whose prices are higher than or equal to $250. Order the result by product price in
descending, then product name in ascending. Return pro_name and pro_price.::

SELECT pro_name,pro_price FROM item_mast WHERE pro_price>=250 ORDER BY pro_price DESC;

Q.24 From the following table, write a SQL query to calculate average price of the items for each company. Return average price and company code.::

SELECT AVG (pro_price),pro_com FROM item_mast GROUP BY pro_com;









